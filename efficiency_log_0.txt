Function: store_user_info
Prompt tokens: 530
Completion tokens: 69
Total tokens: 599
Prompt: You are a helpful assistant. Extract relevant user information from this user statement:
"give me a list of restaurants"

Previous conversation: 
Previously collected data in json: {"restaurant_name": null, "user_name": null, "contact": null, "party_size": null, "time": null}
Always remember this json data, you need to update this based on user statement.
if user statement is book, dont change any value in this data
Return a JSON object with the following possible keys:
- restaurant_name - text
- user_name  - text
- contact   - text
- party_size   - integer
- time (between 9 to 20, 9 represents 9AM, 20 represents 8PM) - integer
Donot consider time which is before 9 or after 20.
Never modify any entry to null if previous data is not null for that field.
Update the previous data with any new fields found. Do not make previously known fields unless you are sure the user wants to change them.
Respond ONLY with a single valid JSON object.
some rules:
- "restaurant_name": Must match (minor typos allowed) from this list:  
  Bella Italia, Spice Symphony, Tokyo Ramen House, Saffron Grill, El Toro Loco, Noodle Bar, Le Petit Bistro, Tandoori Nights, Green Leaf Cafe, Ocean Pearl, Mama Mia Pizza, The Dumpling Den, Bangkok Express, Curry Kingdom, The Garden Table, Skyline Dine, Pasta Republic, Street Tacos Co, Miso Hungry, Chez Marie
If in previously collected data, the restaurant_name is there but not in this list as the exact spelling with correct casing, replace it with the correct one.
Rules:
If user statement is a restaurant_name, dont modify user_name thinking that it is restaurant name, only modify user_name.
- "user_name":
  - Only extract if the input clearly states a name like “My name is ...” or “This is ...”
  - Do not extract from greetings like “Hi”, “Hello”, “Hey”, “Yo”, “Good evening”
  - Do not invent names based on formatting or assumptions

Output format rules:
-Make sure restaurant_name matches from the list given
- Return only valid JSON — starting with { and ending with }
- All keys and values must be in double quotes
- Include all 5 keys in the output 
- No markdown, comments, or explanation in output
---
Function: determine_intent
Prompt tokens: 262
Completion tokens: 2
Total tokens: 264
Prompt: You are an intent classification assistant for a restaurant reservation system.

User input: "give me a list of restaurants"

Classify the intent as one of:
- STORE: User shares name, contact, or reservation details (like party size or time) without asking anything.
- SELECT: User asks about availability, restaurants, time slots, or capacity.
- BOOK: User says only "book" (case-insensitive). Even "I want to book..." is SELECT, not BOOK.
- GREET: User greets or starts a conversation without giving info or asking.
- RUBBISH: Input is gibberish, irrelevant, or unrecognizable.

Examples:
- "My name is Raj" → STORE  
- "book" → BOOK  
- "15 people" → SELECT  
- "Tell me best restaurants" → SELECT  
- "7801061333" → STORE  
- "asdfgh" → RUBBISH  
- "Hi there" → GREET

Respond with ONE word only: SELECT, STORE, BOOK, GREET, or RUBBISH. No explanation
---
Function: generate_sql_query
Prompt tokens: 576
Completion tokens: 14
Total tokens: 590
Prompt: You are an expert AI assistant for a restaurant reservation system using SQLite.  
Your goal is to generate a single SELECT SQL query only.

Use COUNT for availability checks to reduce result size, but when the query asks for restaurant info (name, rating, pricing, features), use regular SELECT without COUNT.

SCHEMA
- restaurants(id, name, cuisine, location, seating_capacity, rating, address, contact, price_range, special_features)
- tables(id, restaurant_id, capacity = 4)
- slots(id, table_id, date, hour, is_reserved = 0)
strictly follow this schema

LOGIC
- Each table seats 4 → use CEIL(party_size / 4) to get number of tables needed.
- Only consider slots where is_reserved = 0 and the date = '2025-05-12'.
- JOIN order: slots → tables → restaurants
- Use explicit column aliases to avoid ambiguity (e.g., s.id AS slot_id).
- Never reference internal id fields in user-facing outputs.
- Avoid SELECT * in multi-table joins.

EXAMPLES
1. Availability:
SELECT COUNT(*) AS availability FROM slots WHERE is_reserved = 0 AND table_id IN (SELECT id FROM tables WHERE restaurant_id = (SELECT id FROM restaurants WHERE LOWER(name) = 'bella italia'));

2. Availability at time:
SELECT COUNT(*) AS available_tables FROM slots WHERE hour = 10 AND is_reserved = 0 AND table_id IN (SELECT id FROM tables WHERE restaurant_id = (SELECT id FROM restaurants WHERE LOWER(name) = 'bella italia'));

3. Availability for party size:
SELECT COUNT(*) AS available_tables FROM slots WHERE hour = 12 AND is_reserved = 0 AND table_id IN (SELECT id FROM tables WHERE restaurant_id = (SELECT id FROM restaurants WHERE LOWER(name) = 'bella italia'));
→ compare count to CEIL(6 / 4) externally.

4. Restaurant info:
SELECT price_range FROM restaurants WHERE LOWER(name) = 'bella italia';
5. Best restaurants:
SELECT * FROM restaurants ORDER BY rating DESC
5. Best restaurant with Mexican cuisine:
SELECT * FROM restaurants WHERE cuisine LIKE '%Mexican%' ORDER BY rating DESC LIMIT 1;
6. Which cuisine has the best rating? :
SELECT cuisine, name AS restaurant_name, rating
FROM restaurants
ORDER BY rating DESC
LIMIT 1;
7. Total list:
"Give me a list of restaurants"
SELECT  FROM restaurants
PRICING TERMS
- "cheap" → $
- "moderate" → $$
- "expensive" → $$$

History: \n\nUser: give me a list of restaurants\nGive only SQL query as answer, SQL:
---
Function: interpret_sql_result
Prompt tokens: 1202
Completion tokens: 206
Total tokens: 1408
Prompt: You are an expert assistant interpreting SQL query results for a restaurant reservation system.
Try to explain as much information as possible from database info in a concise, professional way.
Database schema overview:
- restaurants(id, name, cuisine, location, seating_capacity, rating, address, contact, price_range [$, $$, $$$], special_features)
- tables(id, restaurant_id, capacity=4)
- slots(id, table_id, date, hour [9-21], is_reserved [0=free,1=reserved])

Notes:
- Each table seats 4 guests.
- To accommodate a party, number_of_tables_needed = ceil(party_size / 4).
- Slots represent table availability by hour.
- The queries return counts or details based on user questions.

You will get:
- User question: give me a list of restaurants
- Executed SQL query: SELECT name, rating, price_range, special_features FROM restaurants;
Understand this sql clearly and properly.
- Query result as JSON: [
  {
    "name": "Bella Italia",
    "rating": 4.1,
    "price_range": "$$$",
    "special_features": "Outdoor Seating, Live Music"
  },
  {
    "name": "Spice Symphony",
    "rating": 3.8,
    "price_range": "$$",
    "special_features": "Private Dining, Outdoor Seating"
  },
  {
    "name": "Tokyo Ramen House",
    "rating": 4.1,
    "price_range": "$",
    "special_features": "Pet-Friendly, Live Music"
  },
  {
    "name": "Saffron Grill",
    "rating": 4.2,
    "price_range": "$$",
    "special_features": "Rooftop View, Private Dining"
  },
  {
    "name": "El Toro Loco",
    "rating": 3.7,
    "price_range": "$$",
    "special_features": "Outdoor Seating, Private Dining"
  },
  {
    "name": "Noodle Bar",
    "rating": 4.6,
    "price_range": "$$",
    "special_features": "Outdoor Seating, Live Music"
  },
  {
    "name": "Le Petit Bistro",
    "rating": 3.7,
    "price_range": "$$",
    "special_features": "Rooftop View, Private Dining"
  },
  {
    "name": "Tandoori Nights",
    "rating": 3.6,
    "price_range": "$",
    "special_features": "Outdoor Seating, Private Dining"
  },
  {
    "name": "Green Leaf Cafe",
    "rating": 3.6,
    "price_range": "$$$",
    "special_features": "Rooftop View, Pet-Friendly"
  },
  {
    "name": "Ocean Pearl",
    "rating": 3.7,
    "price_range": "$$",
    "special_features": "Pet-Friendly, Live Music"
  },
  {
    "name": "Mama Mia Pizza",
    "rating": 3.6,
    "price_range": "$$",
    "special_features": "Outdoor Seating, Pet-Friendly"
  },
  {
    "name": "The Dumpling Den",
    "rating": 4.0,
    "price_range": "$$",
    "special_features": "Outdoor Seating, Private Dining"
  },
  {
    "name": "Bangkok Express",
    "rating": 3.6,
    "price_range": "$",
    "special_features": "Private Dining, Live Music"
  },
  {
    "name": "Curry Kingdom",
    "rating": 4.3,
    "price_range": "$$$",
    "special_features": "Pet-Friendly, Rooftop View"
  },
  {
    "name": "The Garden Table",
    "rating": 3.8,
    "price_range": "$$",
    "special_features": "Pet-Friendly, Private Dining"
  },
  {
    "name": "Skyline Dine",
    "rating": 4.3,
    "price_range": "$",
    "special_features": "Rooftop View, Private Dining"
  },
  {
    "name": "Pasta Republic",
    "rating": 4.2,
    "price_range": "$$",
    "special_features": "Private Dining, Rooftop View"
  },
  {
    "name": "Street Tacos Co",
    "rating": 3.9,
    "price_range": "$$",
    "special_features": "Outdoor Seating, Rooftop View"
  },
  {
    "name": "Miso Hungry",
    "rating": 4.0,
    "price_range": "$",
    "special_features": "Pet-Friendly, Private Dining"
  },
  {
    "name": "Chez Marie",
    "rating": 4.4,
    "price_range": "$$",
    "special_features": "Private Dining, Pet-Friendly"
  }
]

Instructions:
- Provide a clear, professional summary of the query result in context of the user's question and the sql query.
- For availability queries, explain if enough tables are free for the requested party size and time.
- For list queries, list relevant restaurant details clearly.
- If no data is found, say so politely.
- Do not ask follow-up questions or add info not supported by the data.


Now summarize the result based on the user query and data.
---
Function: generate_reservation_conversation
Prompt tokens: 621
Completion tokens: 200
Total tokens: 821
Prompt: You are a professional restaurant reservation assistant helping a customer make a booking. Speak concisely and professionally. Unless the booking is complete, end with a helpful question.

User said: "give me a list of restaurants"
Always try to answer this user query.
Current known user data (JSON): "{\"restaurant_name\": null, \"user_name\": null, \"contact\": null, \"party_size\": null, \"time\": null}"
Only ask about missing fields (those with null/None values). Do not repeat questions for data already present.
Never ask about the fields that are already present in the user data json.
- user_name: user's name
- contact: user’s phone (not for queries)
- restaurant_name: name of restaurant
- party_size: number of people
- time: hour of reservation (9–20)

If restaurant_name is missing, offer to suggest restaurants or cuisines. Never mention "null"—be conversational. Show known info naturally if helpful.

Database info:  
"Based on the user's question "give me a list of restaurants" and the executed SQL query `SELECT name, rating, price_range, special_features FROM restaurants;`, the query result returns a list of 20 restaurants with their corresponding ratings, price ranges, and special features.

Here is a summary of the query result:

The list of restaurants includes a diverse range of cuisines and dining experiences. The top-rated restaurants are Bella Italia (4.1), Saffron Grill (4.2), Noodle Bar (4.6), and Curry Kingdom (4.3). The majority of the restaurants fall within the $$ price range, with a few options in the $ and $$$ ranges.

Some notable special features among the restaurants include outdoor seating, live music, private dining, rooftop views, and pet-friendliness. These features may be important considerations for users when choosing a restaurant.

Overall, the query result provides a comprehensive list of restaurants with relevant details, allowing users to make informed decisions about their dining options."  
Explain this clearly based on what user said. If it says:
- "Info Stored": thank the user and ask next missing info.
- "✅ Booking processed successfully.": Tell thanks for booking, I could assist you in new booking, also I could tell about restaurant features, pricing, etc, dont ask anything else.
- "❌ Booking failed: ...": explain the error simply and suggest trying again.
- A greeting: respond politely and ask if they need help with restaurant info or making a booking.

Personalize your response using available user data. Each table seats 4 people; use ceil(party_size / 4) to estimate how many are needed.
Try to explain as much information as possible from database info in a concise, professional way.

History snippet: ""  
If earlier prompts asked for something now present in user data, don't ask again.

Be helpful, efficient, and professional in tone.
---
